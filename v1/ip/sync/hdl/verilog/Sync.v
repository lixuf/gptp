// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Sync,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.453969,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=25,HLS_SYN_FF=644,HLS_SYN_LUT=1381,HLS_VERSION=2018_3}" *)

module Sync (
        ap_clk,
        ap_rst,
        t1_s_V,
        t1_n_V,
        t2_s_V,
        t2_n_V,
        t3_s_V,
        t3_n_V,
        tb_s_V,
        tb_n_V,
        of_s_V,
        of_s_V_ap_vld,
        of_n_V,
        of_n_V_ap_vld,
        ta_s_V,
        ta_s_V_ap_vld,
        ta_n_V,
        ta_n_V_ap_vld,
        delay_V,
        rv_V,
        ta_offset_V,
        f,
        f_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [47:0] t1_s_V;
input  [31:0] t1_n_V;
input  [47:0] t2_s_V;
input  [31:0] t2_n_V;
input  [47:0] t3_s_V;
input  [31:0] t3_n_V;
input  [47:0] tb_s_V;
input  [31:0] tb_n_V;
output  [47:0] of_s_V;
output   of_s_V_ap_vld;
output  [31:0] of_n_V;
output   of_n_V_ap_vld;
output  [47:0] ta_s_V;
output   ta_s_V_ap_vld;
output  [31:0] ta_n_V;
output   ta_n_V_ap_vld;
input  [31:0] delay_V;
input  [11:0] rv_V;
input  [31:0] ta_offset_V;
output   f;
output   f_ap_vld;

reg of_s_V_ap_vld;
reg of_n_V_ap_vld;
reg ta_s_V_ap_vld;
reg ta_n_V_ap_vld;
reg f_ap_vld;

reg   [31:0] ta_offset_V_read_reg_528;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] ta_offset_V_read_reg_528_pp0_iter1_reg;
reg   [31:0] delay_V_read_reg_533;
reg   [31:0] delay_V_read_reg_533_pp0_iter1_reg;
reg   [31:0] tmp_s_reg_540;
reg   [31:0] tmp_s_reg_540_pp0_iter1_reg;
wire   [31:0] tmp_4_fu_357_p1;
reg   [31:0] tmp_4_reg_545;
reg   [31:0] tmp_4_reg_545_pp0_iter1_reg;
wire   [79:0] ta_V_fu_377_p2;
reg   [79:0] ta_V_reg_550;
wire  signed [78:0] tmp_7_fu_383_p2;
reg  signed [78:0] tmp_7_reg_555;
wire   [31:0] tmp_6_fu_389_p1;
reg   [31:0] tmp_6_reg_560;
reg   [31:0] tmp_6_reg_560_pp0_iter1_reg;
wire   [0:0] ult_fu_403_p2;
reg   [0:0] ult_reg_565;
reg   [0:0] ult_reg_565_pp0_iter1_reg;
reg   [47:0] tmp_8_reg_570;
reg  signed [31:0] tmp_9_reg_575;
reg   [47:0] tmp_12_reg_580;
reg  signed [31:0] tmp_13_reg_585;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0_01001;
wire    ap_block_pp0_stage0;
wire   [47:0] ret_V_fu_187_p1;
wire   [77:0] ret_V_fu_187_p2;
wire   [77:0] tmp_cast_fu_193_p1;
wire   [77:0] t1_V_fu_197_p2;
wire   [47:0] ret_V_6_fu_211_p1;
wire   [31:0] r_V_4_fu_225_p0;
wire   [11:0] r_V_4_fu_225_p1;
wire   [43:0] tmp_5_fu_221_p1;
wire   [77:0] ret_V_6_fu_211_p2;
wire   [43:0] r_V_4_fu_225_p2;
wire   [85:0] lhs_V_fu_231_p3;
wire   [85:0] rhs_V_cast_fu_239_p1;
wire   [85:0] ret_V_7_fu_243_p2;
wire   [77:0] tmp_fu_249_p4;
wire   [77:0] tmp_cast_13_fu_263_p1;
wire   [77:0] t2_y_V_fu_267_p2;
wire   [47:0] ret_V_8_fu_281_p1;
wire   [31:0] r_V_5_fu_291_p0;
wire   [11:0] r_V_5_fu_291_p1;
wire   [77:0] ret_V_8_fu_281_p2;
wire   [43:0] r_V_5_fu_291_p2;
wire   [85:0] lhs_V_1_fu_297_p3;
wire   [85:0] rhs_V_1_cast_fu_305_p1;
wire   [85:0] ret_V_9_fu_309_p2;
wire   [77:0] tmp_2_fu_315_p4;
wire   [78:0] t1_V_cast8_fu_203_p1;
wire   [78:0] t2_V_cast_fu_259_p1;
wire  signed [78:0] tmp_3_fu_337_p2;
wire  signed [79:0] tmp_3_cast_fu_343_p1;
wire   [79:0] tb_V_fu_325_p1;
wire   [32:0] tmp_1_cast_fu_329_p1;
wire   [32:0] tmp_2_cast_fu_333_p1;
wire   [32:0] tmp2_fu_367_p2;
wire   [79:0] tmp2_cast_fu_373_p1;
wire   [79:0] tmp1_fu_361_p2;
wire   [78:0] t2_y_V_cast_fu_273_p1;
wire   [77:0] rhs_V_2_cast_fu_393_p1;
wire   [77:0] ret_V_5_fu_397_p2;
wire  signed [79:0] tmp_7_cast_fu_412_p1;
wire   [79:0] tmp_1_fu_409_p1;
wire   [79:0] mul2_fu_424_p1;
wire   [160:0] mul2_fu_424_p2;
wire   [79:0] of_V_fu_415_p2;
wire   [79:0] mul_fu_454_p1;
wire   [160:0] mul_fu_454_p2;
wire   [31:0] tmp_10_fu_486_p2;
wire   [31:0] tmp5_fu_495_p2;
wire   [31:0] tmp4_fu_500_p2;
wire   [31:0] tmp3_fu_491_p2;
wire   [31:0] tmp_14_fu_512_p2;
wire   [31:0] tmp6_fu_517_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [160:0] mul2_fu_424_p10;
wire   [160:0] mul_fu_454_p10;
wire   [43:0] r_V_4_fu_225_p00;
wire   [43:0] r_V_5_fu_291_p00;
wire   [77:0] ret_V_6_fu_211_p10;
wire   [77:0] ret_V_8_fu_281_p10;
wire   [77:0] ret_V_fu_187_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_V_read_reg_533 <= delay_V;
        delay_V_read_reg_533_pp0_iter1_reg <= delay_V_read_reg_533;
        ta_V_reg_550 <= ta_V_fu_377_p2;
        ta_offset_V_read_reg_528 <= ta_offset_V;
        ta_offset_V_read_reg_528_pp0_iter1_reg <= ta_offset_V_read_reg_528;
        tmp_12_reg_580 <= {{mul_fu_454_p2[157:110]}};
        tmp_13_reg_585 <= {{mul_fu_454_p2[141:110]}};
        tmp_4_reg_545 <= tmp_4_fu_357_p1;
        tmp_4_reg_545_pp0_iter1_reg <= tmp_4_reg_545;
        tmp_6_reg_560 <= tmp_6_fu_389_p1;
        tmp_6_reg_560_pp0_iter1_reg <= tmp_6_reg_560;
        tmp_7_reg_555 <= tmp_7_fu_383_p2;
        tmp_8_reg_570 <= {{mul2_fu_424_p2[157:110]}};
        tmp_9_reg_575 <= {{mul2_fu_424_p2[141:110]}};
        tmp_s_reg_540 <= {{ret_V_9_fu_309_p2[39:8]}};
        tmp_s_reg_540_pp0_iter1_reg <= tmp_s_reg_540;
        ult_reg_565 <= ult_fu_403_p2;
        ult_reg_565_pp0_iter1_reg <= ult_reg_565;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f_ap_vld = 1'b1;
    end else begin
        f_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        of_n_V_ap_vld = 1'b1;
    end else begin
        of_n_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        of_s_V_ap_vld = 1'b1;
    end else begin
        of_s_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ta_n_V_ap_vld = 1'b1;
    end else begin
        ta_n_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ta_s_V_ap_vld = 1'b1;
    end else begin
        ta_s_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign f = (ult_reg_565_pp0_iter1_reg ^ 1'd1);

assign lhs_V_1_fu_297_p3 = {{ret_V_8_fu_281_p2}, {8'd0}};

assign lhs_V_fu_231_p3 = {{ret_V_6_fu_211_p2}, {8'd0}};

assign mul2_fu_424_p1 = mul2_fu_424_p10;

assign mul2_fu_424_p10 = ta_V_reg_550;

assign mul2_fu_424_p2 = (161'd1298074214633706907132625 * mul2_fu_424_p1);

assign mul_fu_454_p1 = mul_fu_454_p10;

assign mul_fu_454_p10 = of_V_fu_415_p2;

assign mul_fu_454_p2 = (161'd1298074214633706907132625 * mul_fu_454_p1);

assign of_V_fu_415_p2 = ($signed(tmp_7_cast_fu_412_p1) + $signed(tmp_1_fu_409_p1));

assign of_n_V = (tmp6_fu_517_p2 + tmp_6_reg_560_pp0_iter1_reg);

assign of_s_V = tmp_12_reg_580;

assign r_V_4_fu_225_p0 = r_V_4_fu_225_p00;

assign r_V_4_fu_225_p00 = t2_n_V;

assign r_V_4_fu_225_p1 = tmp_5_fu_221_p1;

assign r_V_4_fu_225_p2 = (r_V_4_fu_225_p0 * r_V_4_fu_225_p1);

assign r_V_5_fu_291_p0 = r_V_5_fu_291_p00;

assign r_V_5_fu_291_p00 = tb_n_V;

assign r_V_5_fu_291_p1 = tmp_5_fu_221_p1;

assign r_V_5_fu_291_p2 = (r_V_5_fu_291_p0 * r_V_5_fu_291_p1);

assign ret_V_5_fu_397_p2 = (t1_V_fu_197_p2 + rhs_V_2_cast_fu_393_p1);

assign ret_V_6_fu_211_p1 = ret_V_6_fu_211_p10;

assign ret_V_6_fu_211_p10 = t2_s_V;

assign ret_V_6_fu_211_p2 = (78'd1000000000 * ret_V_6_fu_211_p1);

assign ret_V_7_fu_243_p2 = (lhs_V_fu_231_p3 + rhs_V_cast_fu_239_p1);

assign ret_V_8_fu_281_p1 = ret_V_8_fu_281_p10;

assign ret_V_8_fu_281_p10 = tb_s_V;

assign ret_V_8_fu_281_p2 = (78'd1000000000 * ret_V_8_fu_281_p1);

assign ret_V_9_fu_309_p2 = (lhs_V_1_fu_297_p3 + rhs_V_1_cast_fu_305_p1);

assign ret_V_fu_187_p1 = ret_V_fu_187_p10;

assign ret_V_fu_187_p10 = t1_s_V;

assign ret_V_fu_187_p2 = (78'd1000000000 * ret_V_fu_187_p1);

assign rhs_V_1_cast_fu_305_p1 = r_V_5_fu_291_p2;

assign rhs_V_2_cast_fu_393_p1 = delay_V;

assign rhs_V_cast_fu_239_p1 = r_V_4_fu_225_p2;

assign t1_V_cast8_fu_203_p1 = t1_V_fu_197_p2;

assign t1_V_fu_197_p2 = (ret_V_fu_187_p2 + tmp_cast_fu_193_p1);

assign t2_V_cast_fu_259_p1 = tmp_fu_249_p4;

assign t2_y_V_cast_fu_273_p1 = t2_y_V_fu_267_p2;

assign t2_y_V_fu_267_p2 = (ret_V_6_fu_211_p2 + tmp_cast_13_fu_263_p1);

assign ta_V_fu_377_p2 = (tmp2_cast_fu_373_p1 + tmp1_fu_361_p2);

assign ta_n_V = (tmp4_fu_500_p2 + tmp3_fu_491_p2);

assign ta_s_V = tmp_8_reg_570;

assign tb_V_fu_325_p1 = tmp_2_fu_315_p4;

assign tmp1_fu_361_p2 = ($signed(tmp_3_cast_fu_343_p1) + $signed(tb_V_fu_325_p1));

assign tmp2_cast_fu_373_p1 = tmp2_fu_367_p2;

assign tmp2_fu_367_p2 = (tmp_1_cast_fu_329_p1 + tmp_2_cast_fu_333_p1);

assign tmp3_fu_491_p2 = (tmp_s_reg_540_pp0_iter1_reg + tmp_4_reg_545_pp0_iter1_reg);

assign tmp4_fu_500_p2 = (tmp5_fu_495_p2 + delay_V_read_reg_533_pp0_iter1_reg);

assign tmp5_fu_495_p2 = (tmp_10_fu_486_p2 + ta_offset_V_read_reg_528_pp0_iter1_reg);

assign tmp6_fu_517_p2 = (tmp_14_fu_512_p2 + delay_V_read_reg_533_pp0_iter1_reg);

assign tmp_10_fu_486_p2 = ($signed(32'd3294967296) * $signed(tmp_9_reg_575));

assign tmp_14_fu_512_p2 = ($signed(32'd3294967296) * $signed(tmp_13_reg_585));

assign tmp_1_cast_fu_329_p1 = delay_V;

assign tmp_1_fu_409_p1 = delay_V_read_reg_533;

assign tmp_2_cast_fu_333_p1 = ta_offset_V;

assign tmp_2_fu_315_p4 = {{ret_V_9_fu_309_p2[85:8]}};

assign tmp_3_cast_fu_343_p1 = tmp_3_fu_337_p2;

assign tmp_3_fu_337_p2 = (t1_V_cast8_fu_203_p1 - t2_V_cast_fu_259_p1);

assign tmp_4_fu_357_p1 = tmp_3_fu_337_p2[31:0];

assign tmp_5_fu_221_p1 = rv_V;

assign tmp_6_fu_389_p1 = tmp_7_fu_383_p2[31:0];

assign tmp_7_cast_fu_412_p1 = tmp_7_reg_555;

assign tmp_7_fu_383_p2 = (t1_V_cast8_fu_203_p1 - t2_y_V_cast_fu_273_p1);

assign tmp_cast_13_fu_263_p1 = t2_n_V;

assign tmp_cast_fu_193_p1 = t1_n_V;

assign tmp_fu_249_p4 = {{ret_V_7_fu_243_p2[85:8]}};

assign ult_fu_403_p2 = ((ret_V_5_fu_397_p2 < t2_y_V_fu_267_p2) ? 1'b1 : 1'b0);

endmodule //Sync
