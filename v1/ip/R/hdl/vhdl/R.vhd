-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity R is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    t4_sec_V : IN STD_LOGIC_VECTOR (47 downto 0);
    t2_sec_V : IN STD_LOGIC_VECTOR (47 downto 0);
    t3_sec_V : IN STD_LOGIC_VECTOR (47 downto 0);
    t1_sec_V : IN STD_LOGIC_VECTOR (47 downto 0);
    t1 : IN STD_LOGIC_VECTOR (31 downto 0);
    t2 : IN STD_LOGIC_VECTOR (31 downto 0);
    t3 : IN STD_LOGIC_VECTOR (31 downto 0);
    t4 : IN STD_LOGIC_VECTOR (31 downto 0);
    found_clock : IN STD_LOGIC_VECTOR (31 downto 0);
    increment_nano_V : OUT STD_LOGIC_VECTOR (5 downto 0);
    increment_nano_V_ap_vld : OUT STD_LOGIC;
    increment_subnano_V : OUT STD_LOGIC_VECTOR (19 downto 0);
    increment_subnano_V_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of R is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "R,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.393000,HLS_SYN_LAT=16,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=7,HLS_SYN_FF=1243,HLS_SYN_LUT=2461,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3B9ACA00 : STD_LOGIC_VECTOR (31 downto 0) := "00111011100110101100101000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_C : STD_LOGIC_VECTOR (11 downto 0) := "000000001100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

    signal t1_assign_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_assign_reg_527 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal t2_assign_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t2_assign_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_237_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_537 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_537_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_537_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_537_pp0_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_537_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_537_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_537_pp0_iter6_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_537_pp0_iter7_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_537_pp0_iter8_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_537_pp0_iter9_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_537_pp0_iter10_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_537_pp0_iter11_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_537_pp0_iter12_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_537_pp0_iter13_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_537_pp0_iter14_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_reg_537_pp0_iter15_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_547 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_assign_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal man_V_2_fu_293_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_558 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_fu_331_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_563 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_24_fu_345_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_24_reg_569 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_574 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_reg_579 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_430_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp_reg_584 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp11_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal t1_sec_V_assign_fu_181_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_1_fu_187_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_assign_2_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_209_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_5_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t2_assign_2_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_assign_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_257_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_fu_271_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_fu_275_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_1_fu_283_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_s_fu_249_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_287_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_13_fu_245_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_s_fu_267_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_307_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_319_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_fu_325_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ireg_V_to_int_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_364_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_372_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp3_fu_392_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp21_demorgan_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_cast_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_459_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_17_fu_463_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sel_tmp4_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_468_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_20_fu_472_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp5_fu_480_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_fu_487_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal res_V_fu_520_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_28_fu_508_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal res_V_fu_520_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal res_V_fu_520_p10 : STD_LOGIC_VECTOR (13 downto 0);

    component R_fdiv_32ns_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component R_uitofp_32ns_32_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component R_fpext_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component R_mul_mul_14s_12ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    R_fdiv_32ns_32ns_bkb_U1 : component R_fdiv_32ns_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_reg_542,
        din1 => tmp_9_reg_547,
        ce => ap_const_logic_1,
        dout => grp_fu_168_p2);

    R_uitofp_32ns_32_cud_U2 : component R_uitofp_32ns_32_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t1_assign_reg_527,
        ce => ap_const_logic_1,
        dout => grp_fu_172_p1);

    R_uitofp_32ns_32_cud_U3 : component R_uitofp_32ns_32_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t2_assign_reg_532,
        ce => ap_const_logic_1,
        dout => grp_fu_175_p1);

    R_fpext_32ns_64_1_1_U4 : component R_fpext_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => v_assign_reg_552,
        dout => d_assign_fu_178_p1);

    R_mul_mul_14s_12ndEe_U5 : component R_mul_mul_14s_12ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 12,
        dout_WIDTH => 14)
    port map (
        din0 => tmp_27_reg_537_pp0_iter15_reg,
        din1 => res_V_fu_520_p1,
        dout => res_V_fu_520_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                man_V_2_reg_558 <= man_V_2_fu_293_p3;
                sel_tmp11_reg_589 <= sel_tmp11_fu_450_p2;
                sel_tmp7_reg_579 <= sel_tmp7_fu_412_p2;
                sel_tmp_reg_584 <= sel_tmp_fu_430_p3;
                sh_amt_reg_563 <= sh_amt_fu_331_p3;
                tmp_14_reg_574 <= tmp_14_fu_349_p2;
                tmp_24_reg_569 <= tmp_24_fu_345_p1;
                tmp_27_reg_537_pp0_iter10_reg <= tmp_27_reg_537_pp0_iter9_reg;
                tmp_27_reg_537_pp0_iter11_reg <= tmp_27_reg_537_pp0_iter10_reg;
                tmp_27_reg_537_pp0_iter12_reg <= tmp_27_reg_537_pp0_iter11_reg;
                tmp_27_reg_537_pp0_iter13_reg <= tmp_27_reg_537_pp0_iter12_reg;
                tmp_27_reg_537_pp0_iter14_reg <= tmp_27_reg_537_pp0_iter13_reg;
                tmp_27_reg_537_pp0_iter15_reg <= tmp_27_reg_537_pp0_iter14_reg;
                tmp_27_reg_537_pp0_iter2_reg <= tmp_27_reg_537_pp0_iter1_reg;
                tmp_27_reg_537_pp0_iter3_reg <= tmp_27_reg_537_pp0_iter2_reg;
                tmp_27_reg_537_pp0_iter4_reg <= tmp_27_reg_537_pp0_iter3_reg;
                tmp_27_reg_537_pp0_iter5_reg <= tmp_27_reg_537_pp0_iter4_reg;
                tmp_27_reg_537_pp0_iter6_reg <= tmp_27_reg_537_pp0_iter5_reg;
                tmp_27_reg_537_pp0_iter7_reg <= tmp_27_reg_537_pp0_iter6_reg;
                tmp_27_reg_537_pp0_iter8_reg <= tmp_27_reg_537_pp0_iter7_reg;
                tmp_27_reg_537_pp0_iter9_reg <= tmp_27_reg_537_pp0_iter8_reg;
                tmp_8_reg_542 <= grp_fu_172_p1;
                tmp_9_reg_547 <= grp_fu_175_p1;
                v_assign_reg_552 <= grp_fu_168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                t1_assign_reg_527 <= t1_assign_fu_203_p2;
                t2_assign_reg_532 <= t2_assign_fu_231_p2;
                tmp_27_reg_537 <= tmp_27_fu_237_p1;
                tmp_27_reg_537_pp0_iter1_reg <= tmp_27_reg_537;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    F2_fu_307_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_s_fu_267_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;
    ap_return <= r_V_fu_487_p3;
    exp_tmp_V_fu_257_p4 <= ireg_V_fu_241_p1(62 downto 52);
    increment_nano_V <= res_V_fu_520_p2(13 downto 8);

    increment_nano_V_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            increment_nano_V_ap_vld <= ap_const_logic_1;
        else 
            increment_nano_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    increment_subnano_V <= (tmp_28_fu_508_p1 & ap_const_lv12_0);

    increment_subnano_V_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            increment_subnano_V_ap_vld <= ap_const_logic_1;
        else 
            increment_subnano_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ireg_V_fu_241_p1 <= d_assign_fu_178_p1;
    ireg_V_to_int_fu_361_p1 <= v_assign_reg_552;
    man_V_1_fu_287_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_1_fu_283_p1));
    man_V_2_fu_293_p3 <= 
        man_V_1_fu_287_p2 when (p_Result_s_fu_249_p3(0) = '1') else 
        p_Result_1_fu_283_p1;
    p_Result_1_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_275_p3),54));
    p_Result_s_fu_249_p3 <= ireg_V_fu_241_p1(63 downto 63);
    r_V_fu_487_p3 <= 
        tmp_20_fu_472_p2 when (sel_tmp11_reg_589(0) = '1') else 
        sel_tmp5_fu_480_p3;
    res_V_fu_520_p1 <= res_V_fu_520_p10(12 - 1 downto 0);
    res_V_fu_520_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_487_p3),14));
    sel_tmp10_fu_444_p2 <= (sel_tmp21_demorgan_fu_438_p2 xor ap_const_lv1_1);
    sel_tmp11_fu_450_p2 <= (tmp_15_fu_355_p2 and sel_tmp10_fu_444_p2);
    sel_tmp1_fu_380_p2 <= (tmp_7_fu_301_p2 xor ap_const_lv1_1);
    sel_tmp21_demorgan_fu_438_p2 <= (tmp_3_fu_313_p2 or sel_tmp6_demorgan_fu_400_p2);
    sel_tmp2_fu_386_p2 <= (tmp_12_fu_339_p2 and sel_tmp1_fu_380_p2);
    sel_tmp3_fu_392_p3 <= 
        tmp_24_fu_345_p1 when (sel_tmp2_fu_386_p2(0) = '1') else 
        ap_const_lv12_0;
    sel_tmp4_fu_476_p2 <= (tmp_14_reg_574 and sel_tmp7_reg_579);
    sel_tmp5_fu_480_p3 <= 
        tmp_25_fu_468_p1 when (sel_tmp4_fu_476_p2(0) = '1') else 
        sel_tmp_reg_584;
    sel_tmp6_demorgan_fu_400_p2 <= (tmp_7_fu_301_p2 or tmp_12_fu_339_p2);
    sel_tmp6_fu_406_p2 <= (sel_tmp6_demorgan_fu_400_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_412_p2 <= (tmp_3_fu_313_p2 and sel_tmp6_fu_406_p2);
    sel_tmp8_fu_418_p2 <= (tmp_14_fu_349_p2 xor ap_const_lv1_1);
    sel_tmp9_fu_424_p2 <= (sel_tmp8_fu_418_p2 and sel_tmp7_fu_412_p2);
    sel_tmp_fu_430_p3 <= 
        tmp_18_fu_372_p3 when (sel_tmp9_fu_424_p2(0) = '1') else 
        sel_tmp3_fu_392_p3;
        sh_amt_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_563),32));

    sh_amt_fu_331_p3 <= 
        tmp_10_fu_319_p2 when (tmp_3_fu_313_p2(0) = '1') else 
        tmp_11_fu_325_p2;
    t1_assign_2_fu_197_p2 <= std_logic_vector(unsigned(t3) - unsigned(t1));
    t1_assign_fu_203_p2 <= std_logic_vector(unsigned(tmp_2_fu_191_p2) + unsigned(t1_assign_2_fu_197_p2));
    t1_sec_V_assign_fu_181_p2 <= std_logic_vector(unsigned(t3_sec_V) - unsigned(t1_sec_V));
    t2_assign_2_fu_225_p2 <= std_logic_vector(unsigned(t4) - unsigned(t2));
    t2_assign_fu_231_p2 <= std_logic_vector(unsigned(tmp_6_fu_219_p2) + unsigned(t2_assign_2_fu_225_p2));
    tmp_10_fu_319_p2 <= std_logic_vector(signed(ap_const_lv12_FF8) + signed(F2_fu_307_p2));
    tmp_11_fu_325_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(F2_fu_307_p2));
    tmp_12_fu_339_p2 <= "1" when (F2_fu_307_p2 = ap_const_lv12_8) else "0";
    tmp_13_fu_245_p1 <= ireg_V_fu_241_p1(63 - 1 downto 0);
    tmp_14_fu_349_p2 <= "1" when (unsigned(sh_amt_fu_331_p3) < unsigned(ap_const_lv12_36)) else "0";
    tmp_15_fu_355_p2 <= "1" when (unsigned(sh_amt_fu_331_p3) < unsigned(ap_const_lv12_C)) else "0";
    tmp_16_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_cast_fu_456_p1),54));
    tmp_17_fu_463_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_558),to_integer(unsigned('0' & tmp_16_fu_459_p1(31-1 downto 0)))));
    tmp_18_fu_372_p3 <= 
        ap_const_lv12_FFF when (tmp_26_fu_364_p3(0) = '1') else 
        ap_const_lv12_0;
    tmp_19_fu_271_p1 <= ireg_V_fu_241_p1(52 - 1 downto 0);
    tmp_1_fu_187_p1 <= t1_sec_V_assign_fu_181_p2(32 - 1 downto 0);
    tmp_20_fu_472_p2 <= std_logic_vector(shift_left(unsigned(tmp_24_reg_569),to_integer(unsigned('0' & sh_amt_reg_563(12-1 downto 0)))));
    tmp_24_fu_345_p1 <= man_V_2_fu_293_p3(12 - 1 downto 0);
    tmp_25_fu_468_p1 <= tmp_17_fu_463_p2(12 - 1 downto 0);
    tmp_26_fu_364_p3 <= ireg_V_to_int_fu_361_p1(31 downto 31);
    tmp_27_fu_237_p1 <= found_clock(14 - 1 downto 0);
    tmp_28_fu_508_p1 <= res_V_fu_520_p2(8 - 1 downto 0);
    tmp_2_fu_191_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_3B9ACA00) * signed(tmp_1_fu_187_p1))), 32));
    tmp_3_fu_313_p2 <= "1" when (signed(F2_fu_307_p2) > signed(ap_const_lv12_8)) else "0";
    tmp_4_fu_209_p2 <= std_logic_vector(unsigned(t4_sec_V) - unsigned(t2_sec_V));
    tmp_5_fu_215_p1 <= tmp_4_fu_209_p2(32 - 1 downto 0);
    tmp_6_fu_219_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_3B9ACA00) * signed(tmp_5_fu_215_p1))), 32));
    tmp_7_fu_301_p2 <= "1" when (tmp_13_fu_245_p1 = ap_const_lv63_0) else "0";
    tmp_fu_275_p3 <= (ap_const_lv1_1 & tmp_19_fu_271_p1);
    tmp_s_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_257_p4),12));
end behav;
